#!/usr/bin/env python
"""
Script de prueba para el m√≥dulo de mediciones geom√©tricas.

Prueba el c√°lculo de dimensiones con m√°scaras sint√©ticas.
"""

import numpy as np
import cv2
import sys
import os

# Agregar paths necesarios
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'asistente'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.local')

import django
django.setup()

from analisis_coples.modules.measurements import get_measurement_service

def crear_mascara_rectangular(ancho: int, alto: int, tam_imagen: int = 640) -> np.ndarray:
    """Crea una m√°scara rectangular para pruebas"""
    mascara = np.zeros((tam_imagen, tam_imagen), dtype=np.uint8)
    x_inicio = (tam_imagen - ancho) // 2
    y_inicio = (tam_imagen - alto) // 2
    mascara[y_inicio:y_inicio+alto, x_inicio:x_inicio+ancho] = 255
    return mascara

def crear_mascara_circular(radio: int, tam_imagen: int = 640) -> np.ndarray:
    """Crea una m√°scara circular para pruebas"""
    mascara = np.zeros((tam_imagen, tam_imagen), dtype=np.uint8)
    centro = (tam_imagen // 2, tam_imagen // 2)
    cv2.circle(mascara, centro, radio, 255, -1)
    return mascara

def test_mediciones():
    """Prueba el c√°lculo de mediciones"""
    
    print("\n" + "="*60)
    print("üß™ TEST DEL M√ìDULO DE MEDICIONES GEOM√âTRICAS")
    print("="*60 + "\n")
    
    # Obtener servicio
    service = get_measurement_service()
    
    # Test 1: Rect√°ngulo 200x100
    print("üìä Test 1: Rect√°ngulo 200x100 p√≠xeles")
    print("-" * 60)
    mascara_rect = crear_mascara_rectangular(200, 100)
    mediciones_rect = service.calcular_mediciones_completas(mascara_rect)
    
    print(f"‚úÖ Ancho BBox: {mediciones_rect['ancho_bbox_px']:.2f} px (esperado: ~200)")
    print(f"‚úÖ Alto BBox: {mediciones_rect['alto_bbox_px']:.2f} px (esperado: ~100)")
    print(f"‚úÖ √Årea: {mediciones_rect['area_mascara_px']:.0f} px¬≤ (esperado: ~20000)")
    print(f"‚úÖ Per√≠metro: {mediciones_rect['perimetro_mascara_px']:.2f} px (esperado: ~600)")
    print(f"‚úÖ Excentricidad: {mediciones_rect['excentricidad']:.3f} (esperado: ~0.866 para rect√°ngulo 2:1)")
    print(f"‚úÖ Orientaci√≥n: {mediciones_rect['orientacion_grados']:.2f}¬∞\n")
    
    # Test 2: C√≠rculo radio 100
    print("üìä Test 2: C√≠rculo radio 100 p√≠xeles")
    print("-" * 60)
    mascara_circ = crear_mascara_circular(100)
    mediciones_circ = service.calcular_mediciones_completas(mascara_circ)
    
    print(f"‚úÖ Ancho BBox: {mediciones_circ['ancho_bbox_px']:.2f} px (esperado: ~200)")
    print(f"‚úÖ Alto BBox: {mediciones_circ['alto_bbox_px']:.2f} px (esperado: ~200)")
    print(f"‚úÖ √Årea: {mediciones_circ['area_mascara_px']:.0f} px¬≤ (esperado: ~31416 = œÄ*100¬≤)")
    print(f"‚úÖ Per√≠metro: {mediciones_circ['perimetro_mascara_px']:.2f} px (esperado: ~628 = 2œÄ*100)")
    print(f"‚úÖ Excentricidad: {mediciones_circ['excentricidad']:.3f} (esperado: ~0 para c√≠rculo)")
    print(f"‚úÖ Orientaci√≥n: {mediciones_circ['orientacion_grados']:.2f}¬∞\n")
    
    # Test 3: Conversi√≥n a mil√≠metros
    print("üìä Test 3: Conversi√≥n p√≠xeles ‚Üí mil√≠metros")
    print("-" * 60)
    factor_mm = 0.1  # 1 p√≠xel = 0.1 mm
    service.set_conversion_factor(factor_mm)
    
    mediciones_mm = service.calcular_mediciones_completas(mascara_rect, convertir_a_mm=True)
    
    print(f"Factor de conversi√≥n: {factor_mm} mm/px")
    print(f"‚úÖ Ancho: {mediciones_mm['ancho_bbox_px']:.2f} px ‚Üí {mediciones_mm.get('ancho_bbox_mm', 0):.2f} mm")
    print(f"‚úÖ Alto: {mediciones_mm['alto_bbox_px']:.2f} px ‚Üí {mediciones_mm.get('alto_bbox_mm', 0):.2f} mm")
    print(f"‚úÖ √Årea: {mediciones_mm['area_mascara_px']:.0f} px¬≤ ‚Üí {mediciones_mm.get('area_mascara_mm', 0):.2f} mm¬≤")
    print(f"‚úÖ Per√≠metro: {mediciones_mm['perimetro_mascara_px']:.2f} px ‚Üí {mediciones_mm.get('perimetro_mascara_mm', 0):.2f} mm\n")
    
    # Validaciones
    print("="*60)
    print("üîç VALIDACI√ìN DE RESULTADOS")
    print("="*60 + "\n")
    
    validaciones_ok = True
    
    # Validar rect√°ngulo
    if abs(mediciones_rect['ancho_bbox_px'] - 200) > 5:
        print(f"‚ùå Error en ancho de rect√°ngulo: {mediciones_rect['ancho_bbox_px']}")
        validaciones_ok = False
    else:
        print(f"‚úÖ Ancho de rect√°ngulo correcto")
    
    if abs(mediciones_rect['alto_bbox_px'] - 100) > 5:
        print(f"‚ùå Error en alto de rect√°ngulo: {mediciones_rect['alto_bbox_px']}")
        validaciones_ok = False
    else:
        print(f"‚úÖ Alto de rect√°ngulo correcto")
    
    # Validar c√≠rculo
    if abs(mediciones_circ['excentricidad']) > 0.1:
        print(f"‚ùå Error en excentricidad de c√≠rculo: {mediciones_circ['excentricidad']} (deber√≠a ser ~0)")
        validaciones_ok = False
    else:
        print(f"‚úÖ Excentricidad de c√≠rculo correcta")
    
    # Validar conversi√≥n mm
    if abs(mediciones_mm.get('ancho_bbox_mm', 0) - 20.0) > 1.0:
        print(f"‚ùå Error en conversi√≥n a mm: {mediciones_mm.get('ancho_bbox_mm', 0)} (esperado: ~20)")
        validaciones_ok = False
    else:
        print(f"‚úÖ Conversi√≥n a mil√≠metros correcta")
    
    print("\n" + "="*60)
    if validaciones_ok:
        print("üéâ TODOS LOS TESTS PASARON CORRECTAMENTE")
    else:
        print("‚ùå ALGUNOS TESTS FALLARON")
    print("="*60 + "\n")
    
    return validaciones_ok

if __name__ == "__main__":
    exito = test_mediciones()
    sys.exit(0 if exito else 1)

